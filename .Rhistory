calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
set.seed(3)
A <- interaction_matrix_random(num, stren, conne) #generate a random interaction matrix
I1 <- c(1, 2, -1, 1) #put a linear inequality contraint. The interpretation is 1*r1 + 2*r2 - r3 + r4 = 1
I2 <- c(1, 2, 0, 0) #put a linear inequality contraint. The interpretation is 1*r1 + 2*r2 = 1
set.seed(3)
A <- interaction_matrix_random(num, stren, conne) #generate a random interaction matrix
I1 <- c(1, 2, -1, 1) #put a linear inequality contraint. The interpretation is 1*r1 + 2*r2 - r3 + r4 = 1
I2 <- c(1, 2, 0, 0) #put a linear inequality contraint. The interpretation is 1*r1 + 2*r2 = 1
calculate_omega(A) #relative size of the original interaction matrix
calculate_omega_overlap(A, I1) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I1
set.seed(4)
A <- interaction_matrix_random(3, 0.4, 1) #generate a random interaction matrix
C1 <- diag(c(-1,-1,-1), 3) #imposing a biological constraint. Here it refers to that the growth rates of all species have to be positive
C2 <- diag(c(1,-1,1), 3)  #imposing a biological constraint. Here it refers to that the growth rates of species 1 and 3 have to be negative, and the growth rates of species 2 has to be positive
set.seed(4)
A <- interaction_matrix_random(3, 0.4, 1) #generate a random interaction matrix
C1 <- diag(c(-1,-1,-1), 3) #imposing a biological constraint. Here it refers to that the growth rates of all species have to be positive
C2 <- diag(c(1,-1,1), 3)  #imposing a biological constraint. Here it refers to that the growth rates of species 1 and 3 have to be negative, and the growth rates of species 2 has to be positive
calculate_omega(A) #relative size of the original interaction matrix
calculate_omega_overlap(A, C1) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I1
calculate_omega_overlap(A, C2) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I2
set.seed(4)
A <- interaction_matrix_random(3, 0.4, 1) #generate a random interaction matrix
C1 <- diag(c(-1,-1,-1), 3) #imposing a biological constraint. Here it refers to that the growth rates of all species have to be positive
C2 <- diag(c(1,-1,1), 3)  #imposing a biological constraint. Here it refers to that the growth rates of species 1 and 3 have to be negative, and the growth rates of species 2 has to be positive
calculate_omega(A) #relative size of the original interaction matrix
calculate_omega_overlap(A, C1) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I1
calculate_omega_overlap(A, C2) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I2
use_package(mvtnorm, type = "Imports")
library(devtools)
use_package(mvtnorm, type = "Imports")
use_package("mvtnorm", type = "Imports")
use_package("mgcv", type = "Imports")
use_package("geometry", type = "Imports")
use_package("dplyr", type = "Imports")
use_package("
tidyr", type = "Imports")
use_package("tidyr", type = "Imports")
use_package("purrr", type = "Imports")
use_pipe()
use_tibble()
use_test(name = "test")
library(feasoverlap)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
set.seed(4)
A <- interaction_matrix_random(3, 0.4, 1) #generate a random interaction matrix
C1 <- diag(c(-1,-1,-1), 3) #imposing a biological constraint. Here it refers to that the growth rates of all species have to be positive
C2 <- diag(c(1,-1,1), 3)  #imposing a biological constraint. Here it refers to that the growth rates of species 1 and 3 have to be negative, and the growth rates of species 2 has to be positive
calculate_omega(A) #relative size of the original interaction matrix
calculate_omega_overlap(A, C1) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I1
calculate_omega_overlap(A, C2) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I2
set.seed(40)
A <- interaction_matrix_random(3, 0.4, 1) #generate a random interaction matrix
C1 <- diag(c(-1,-1,-1), 3) #imposing a biological constraint. Here it refers to that the growth rates of all species have to be positive
C2 <- diag(c(1,-1,1), 3)  #imposing a biological constraint. Here it refers to that the growth rates of species 1 and 3 have to be negative, and the growth rates of species 2 has to be positive
calculate_omega(A) #relative size of the original interaction matrix
calculate_omega_overlap(A, C1) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I1
calculate_omega_overlap(A, C2) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I2
set.seed(10)
A <- interaction_matrix_random(3, 0.4, 1) #generate a random interaction matrix
C1 <- diag(c(-1,-1,-1), 3) #imposing a biological constraint. Here it refers to that the growth rates of all species have to be positive
C2 <- diag(c(1,-1,1), 3)  #imposing a biological constraint. Here it refers to that the growth rates of species 1 and 3 have to be negative, and the growth rates of species 2 has to be positive
calculate_omega(A) #relative size of the original interaction matrix
calculate_omega_overlap(A, C1) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I1
calculate_omega_overlap(A, C2) #the size of the feasibility domain of a random interaction matrix under linear biological constriants I2
use_rmarkdown_template()
use_readme_rmd()
build_readme()
library(feasoverlap)
#set the parameter for the data
num = 4
stren = 0.4
conne = 1
#generate two random interaction matrices
set.seed(1)
A <- interaction_matrix_random(num, stren, conne)
set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega(A) #relative size of interaction matrix
calculate_omega(B) #relative size of interaction matrix
calculate_omega_overlap(A, B) #overlap of two interaction matrices
build_readme()
calculate_omega_overlap(A, A)
calculate_omega_overlap(A, A)
calculate_omega_overlap(A, B)
calculate_total_volume(A)
calculate_total_volume(B)
calculate_omega_overlap(B,B)
calculate_total_volume(B)
library(feasoverlap)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_total_volume(A)
calculate_total_volume(B)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
calculate_omega_overlap(B,B)
calculate_omega(B)
calculate_omega_overlap(B,B)
calculate_omega(B)
calculate_omega_overlap(B,B)
library(feasoverlap)
num = 5
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(10)
A <- interaction_matrix_random(num, stren, conne)
# set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
calculate_omega_overlap(A, B)
calculate_omega(A)
calculate_omega(B)
calculate_omega_overlap(B,B)
library(feasoverlap)
library(feasoverlap)
styler:::style_active_file()
library(feasoverlap)
#set the parameter for the data
num = 4
stren = 0.4
conne = 1
#generate two random interaction matrices
set.seed(1)
A <- interaction_matrix_random(num, stren, conne)
vertex <- interaction_matrix_random(num, stren, conne)
num <- nrow(vertex)
vertex <- generate_span_vectors(vertex)
vertex <- cbind(vertex, rep(0, num))
(convhulln(t(vertex), output.options = TRUE)$vol)^(1/num)
num <- nrow(vertex)
vertex <- generate_span_vectors(vertex)
vertex <- cbind(vertex, rep(0, num))
convhulln(t(vertex)
convhulln(t(vertex))
convhulln(t(vertex))
library(geometry)
convhulln(t(vertex))
convhulln
vertex
num <- nrow(vertex)
vertex <- generate_span_vectors(vertex)
vertex <- cbind(vertex, rep(0, num))
vertex
#generate two random interaction matrices
set.seed(1)
vertex <- interaction_matrix_random(num, stren, conne)
num <- nrow(vertex)
vertex <- generate_span_vectors(vertex)
vertex <- cbind(vertex, rep(0, num))
vertex
convhulln(t(vertex))
feasible.point((t(vertex))
c
feasible.point((t(vertex)))
feasible.point(convhulln(t(vertex)))
convhulln(t(vertex))
feasible.point(convhulln(t(vertex)))
feasible.point(convhulln(t(vertex)), convhulln(t(vertex)))
vertex
library(uniformly)
runif_on_sphere(n = 100, d = num, r = 1)
abs(runif_on_sphere(n = 100, d = num, r = 1))
vertex
vertex <- interaction_matrix_random(num, stren, conne)
vertex
#set the parameter for the data
num = 4
stren = 0.4
conne = 1
#generate two random interaction matrices
# set.seed(1)
vertex <- interaction_matrix_random(num, stren, conne)
set.seed(1)
A <- interaction_matrix_random(num, stren, conne)
set.seed(2)
B <- interaction_matrix_random(num, stren, conne)
overlap_vertex <- cbind(vertex_detection(A, B), vertex_detection(A, B))
vertex <- cbind(vertex_detection(A, B), vertex_detection(A, B))
num <- nrow(vertex)
vertex
abs(runif_on_sphere(n = 100, d = num, r = 1)) %*% vertex
abs(runif_on_sphere(n = 5, d = num, r = 1)) %*% vertex
vertex
vertex
vertex <- cbind(vertex_detection(A, B), vertex_detection(B, A))
vertex
library(feasoverlap)
abs(runif_on_sphere(n = 5, d = ncol(vertex), r = 1)) %*% vertex
vertex %*% abs(runif_on_sphere(n = 5, d = ncol(vertex), r = 1))
vertex
abs(runif_on_sphere(n = 5, d = ncol(vertex), r = 1))
vertex %*% t(abs(runif_on_sphere(n = 5, d = ncol(vertex), r = 1)))
vertex %*% t(abs(runif_on_sphere(n = 20, d = ncol(vertex), r = 1)))
styler:::style_active_file()
use_package(uniformly)
use_package("uniformly")
library(feasoverlap)
library(feasoverlap)
library(feasoverlap)
# generate two random interaction matrices
set.seed(1)
A <- interaction_matrix_random(num = 4, stren = 0.4, conne = 1)
set.seed(2)
B <- interaction_matrix_random(num = 4, stren = 0.4, conne = 1)
calculate_omega(A) # relative size of interaction matrix
num <- nrow(A)
overlap_vertex <- vertex_detection(A, B) %>%
cbind(vertex_detection(B, A)) %>%
unique(MARGIN = 2)
vertex_detection(B, A)
if (qr(overlap_vertex)$rank < num) {
volume_overlap <- 0
} else {
volume_overlap <- calculate_omega(overlap_vertex, samples)
}
samples = 100
volume_overlap <- calculate_omega(overlap_vertex, samples)
volume_overlap
library(feasoverlap)
library(feasoverlap)
library(feasoverlap)
calculate_omega_overlap
library(feasoverlap)
library(feasoverlap)
library(feasoverlap)
devtools::build_rmd()
devtools::build_readme()
devtools::build_readme()
file.remove(".git/hooks/pre-commit")
load("/Users/chuliangsong/Downloads/Food_web.RData")
library(feasoverlap)
calculate_omega(A) # relative size of interaction matrix
calculate_omega_overlap(A, A) # overlap between the same matrix
calculate_omega(B) # relative size of interaction matrix
calculate_omega_overlap(B, B) # overlap between the same matrix
calculate_omega_overlap(A, B) # overlap of two interaction matrices
calculate_omega_overlap(B, A) # overlap of two interaction matrices
calculate_omega(A, sample = 1000) # relative size of interaction matrix
calculate_omega(A, nsamples = 1000) # relative size of interaction matrix
calculate_omega(B, nsamples = 1000) # relative size of interaction matrix
calculate_omega_overlap(A, B, nsamples = 1000) # overlap of two interaction matrices
library(feasoverlap)
calculate_omega(A) # relative size of interaction matrix
calculate_omega_overlap(A, A) # overlap between the same matrix
calculate_omega(B) # relative size of interaction matrix
calculate_omega_overlap(B, B) # overlap between the same matrix
calculate_omega_overlap(A, B) # overlap of two interaction matrices
calculate_omega_overlap(B, A) # overlap of two interaction matrices
runif_on_unitSimplex(300, d=3)
uniformly::runif_on_unitSimplex(300, d=3)
uniformly::runif_on_unitSimplex(300, d=3) %>% rowSums()
uniformly::runif_in_simplex(1000, diag(5))
diag(5)
calculate_omega_overlap(A, B) # overlap of two interaction matrices
calculate_omega_overlap(B, A) # overlap of two interaction matrices
calculate_omega(A) # relative size of interaction matrix
calculate_omega(A, nsamples = 500) # relative size of interaction matrix
calculate_omega_overlap(A, B, nsamples = 500) # overlap of two interaction matrices
library(feasoverlap)
devtools::build_readme()
load("/Users/chuliangsong/Downloads/Food_web.RData")
library(feasoverlap)
calculate_omega(A) # relative size of interaction matrix
calculate_omega_overlap(A, A) # overlap between the same matrix
calculate_omega(B) # relative size of interaction matrix
calculate_omega_overlap(B, B) # overlap between the same matrix
calculate_omega_overlap(A, B) # overlap of two interaction matrices
calculate_omega_overlap(B, A) #
calculate_omega(A, nsamples = 1000) # relative size of interaction matrix
calculate_omega(B, nsamples = 1000) # relative size of interaction matrix
calculate_omega_overlap(A, B, nsamples = 1000) # overlap of two interaction matrices
calculate_omega_overlap(B, A, nsamples = 1000) #
A
B
library(feasoverlap)
calculate_omega(A, nsamples = 1000) # relative size of interaction matrix
calculate_omega(B, nsamples = 1000) # relative size of interaction matrix
calculate_omega_overlap(A, B, nsamples = 1000) # overlap of two interaction matrices
calculate_omega_overlap(B, A, nsamples = 1000) #
calculate_omega
devtools::build_readme()
load("/Users/chuliangsong/Downloads/Food-web.RData")
library(feasoverlap)
calculate_omega(A) # relative size of interaction matrix
#> [1] 0.4710153
calculate_omega_overlap(A, A) # overlap between the same matrix
#> [1] 0.4710153
calculate_omega(B) # relative size of interaction matrix
#> [1] 0.461008
calculate_omega_overlap(B, B) # overlap between the same matrix
#> [1] 0.461008
calculate_omega_overlap(A, B) # overlap of two interaction matrices
#> [1] 0.3115771
calculate_omega_overlap(B, A) # overlap of two interaction matrices
#> [1] 0.3134456
num <- nrow(A)
overlap_vertex <- vertex_detection(A, B) %>%
cbind(vertex_detection(B, A)) %>%
unique(MARGIN = 2)
overlap_vertex
qr(overlap_vertex)$rank
calculate_omega(overlap_vertex, nsamples)
calculate_omega(overlap_vertex, nsamples=100)
num <- nrow(vertex)
vertex <- overlap_vertex
num <- nrow(vertex)
vertex <- generate_span_vectors(vertex)
vertex <- cbind(
vertex,
vertex %*% t(abs(runif_on_sphere(n = nsamples, d = ncol(vertex), r = 1)))
)
library(geometry)
library(uniformly)
vertex <- cbind(
vertex,
vertex %*% t(abs(runif_on_sphere(n = nsamples, d = ncol(vertex), r = 1)))
)
samples = 100
nsamples = 100
num <- nrow(vertex)
vertex <- generate_span_vectors(vertex)
set.seed(1010)
vertex <- cbind(
vertex,
vertex %*% t(abs(runif_on_sphere(n = nsamples, d = ncol(vertex), r = 1)))
)
vertex <- generate_span_vectors(vertex)
vertex <- cbind(vertex, rep(0, num))
vol_ori <- (convhulln(t(vertex), output.options = TRUE)$vol)^(1 / num)
convhulln(t(vertex))
vertex
t(vertex)
convhulln
vol_ori <- (convhulln(t(vertex), options = "QbB", output.options = TRUE)$vol)^(1 / num)
convhulln(t(vertex), options = "QbB")
(convhulln(t(overlap_vertex), options = "QbB", output.options = TRUE)$vol)
(convhulln(t(overlap_vertex), output.options = TRUE)$vol)
overlap_vertex
(convhulln(t(overlap_vertex), output.options = TRUE)$vol)
convhulln(t(overlap_vertex)
)
convhulln(t(overlap_vertex))
convhulln(t(overlap_vertex), options = "Tv")
convhulln(t(overlap_vertex), options = "Qbb")
convhulln(t(overlap_vertex), options = "Pp")
t(vertex)
t(vertex) %>% rank()
t(vertex) %>% qr()
overlap_vertex
convhulln(t(overlap_vertex[1:6,]), options = "Pp")
convhulln(t(overlap_vertex[1:7,]), options = "Pp")
load("/Users/chuliangsong/Downloads/Food-web.RData")
library(feasoverlap)
calculate_omega(A) # relative size of interaction matrix
#> [1] 0.4710153
calculate_omega_overlap(A, A) # overlap between the same matrix
#> [1] 0.4710153
calculate_omega(B) # relative size of interaction matrix
#> [1] 0.461008
calculate_omega_overlap(B, B) # overlap between the same matrix
#> [1] 0.461008
calculate_omega_overlap(A, B) # overlap of two interaction matrices
#> [1] 0.3115771
calculate_omega_overlap(B, A) # overlap of two interaction matrices
#> [1] 0.3134456
num <- nrow(A)
overlap_vertex <- vertex_detection(A, B) %>%
cbind(vertex_detection(B, A)) %>%
unique(MARGIN = 2)
vertex <- overlap_vertex
vertex <- generate_span_vectors(vertex)
vertex <- cbind(vertex, rep(0, num))
vol_ori <- (convhulln(t(vertex), output.options = TRUE)$vol)^(1 / num)
library(geometry)
vol_ori <- (convhulln(t(vertex), output.options = TRUE)$vol)^(1 / num)
try(convhulln(t(vertex))
)
library(feasoverlap)
function(cond)
d
calculate_omega(A) # relative size of interaction matrix
#> [1] 0.4710153
calculate_omega_overlap(A, A) # overlap between the same matrix
#> [1] 0.4710153
calculate_omega(B) # relative size of interaction matrix
#> [1] 0.461008
calculate_omega_overlap(B, B) # overlap between the same matrix
#> [1] 0.461008
calculate_omega_overlap(A, B) # overlap of two interaction matrices
#> [1] 0.3115771
calculate_omega_overlap(B, A) # overlap of two interaction matrices
#> [1] 0.3134456
